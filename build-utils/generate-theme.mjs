import fs from 'fs';
import { request } from 'undici';
import * as dotenv from 'dotenv';
import { generateCssVars } from './styles.mjs';
import { generateFontLinks } from './fonts.mjs';
import { generateFontFiles } from './fonts-node.mjs';

dotenv.config();

(async () => {
  try {
    const settings = await fetchSettings();
    if (!settings) {
      throw new Error('Settings object is undefined or null');
    }
    console.log('Fetched settings:', settings);

    const cssVars = generateCssVars(settings);
    if (!cssVars) {
      throw new Error('CSS Variables are undefined or null');
    }
    saveStyles(cssVars);

    const fontLinks = generateFontLinks(settings?.typography?.font_family);
    generateFontFiles(fontLinks, './fonts'); // Specify a valid directory for fonts
  } catch (error) {
    console.error('Error during script execution:', error);
  }
})();

async function fetchSettings() {
  const authorization = `Basic ${Buffer.from(
    process.env.NEXT_PUBLIC_SWELL_PUBLIC_KEY ?? '',
  ).toString('base64')}`;

  const { body } = await request(
    `${process.env.NEXT_PUBLIC_SWELL_STORE_URL}/api/settings`,
    {
      headers: {
        'Content-Type': 'application/json',
        authorization,
      },
    },
  );

  const settings = await body.json();
  console.log('Settings fetched from API:', settings);
  return settings;
}

function saveStyles(cssVars) {
  if (!cssVars) {
    throw new Error('CSS Variables are undefined or null');
  }
  const vars = cssVars.map((cssVar) => `  ${cssVar}`); // add indentation
  const content = [
    '/* AUTOGENERATED */',
    "@import './fonts.css';",
    '',
    ':root {',
    ...vars,
    '}',
    '',
  ].join('\n');
  fs.writeFileSync('./styles/theme.css', content);
}
